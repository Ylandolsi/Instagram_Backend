Refresh Token With HttpOnly Cokies : 
        They are assigned as HTTP Only cookies to the response from backend which actually adds ‚
        Set-Cookie’ header in HTTP response. In this case browser sets the cookies received from backend. 
        HTTP Only cookies are safe from any JavaScript running on the frontend page 
        so it provides additional layer of security against cross site scripting (XSS) attacks



Testing :
        IntegrationTest :
                1. **Microsoft.AspNetCore.Mvc.Testing**: Creates an in-memory test server for API testing
                2. **Microsoft.EntityFrameworkCore.InMemory**: Provides an in-memory database for testing without real database connections


        MOQ : 

                // WRONG - This doesn't work for non-virtual properties
                _mockUserManager.Setup(x => x.PasswordHasher).Returns(_mockPasswordHasher.Object);

                // CORRECT - Directly set the property on the mocked object
                _mockUserManager.Object.PasswordHasher = _mockPasswordHasher.Object;


                This approach works because:

                1. We're not trying to override the behavior of the property getter
                2. Instead, we're setting the actual property value on the mock object
                3. This is analogous to how you'd configure a real UserManager instance

                This is a common pattern when working with mocks of concrete classes that have non-virtual members. For virtual members and interfaces, you can use `.Setup()`, but for non-virtual members, you need to set values directly.


                Virtual vs NonVirtual 

                public class Person
                {
                        // Non-virtual property ( can not be overritten )
                        public string Name { get; set; }
                        
                        // Non-virtual method
                        public void Speak()
                        {
                                Console.WriteLine("Hello");
                        }
                }

                public class Person
                {
                        // Virtual property
                        public virtual string Name { get; set; }
                        
                        // Virtual method
                        public virtual void Speak()
                        {
                                Console.WriteLine("Hello");
                        }
                }

                // only members marked as virtual , abstrat or from interface can be overitten 
                // MOQ creates derived classes that override methods/properties 