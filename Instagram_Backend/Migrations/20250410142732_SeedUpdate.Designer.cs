// <auto-generated />
using System;
using Instagram_Backend.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Instagram_Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250410142732_SeedUpdate")]
    partial class SeedUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Instagram_Backend.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LikeCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<int>("ReplyCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1111111-c111-c111-c111-c11111111111"),
                            Content = "Amazing view!",
                            CreatedAt = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            LikeCount = 3,
                            PostId = new Guid("a1111111-a111-a111-a111-a11111111111"),
                            ReplyCount = 1,
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("c2222222-c222-c222-c222-c22222222222"),
                            Content = "Thanks! It was incredible.",
                            CreatedAt = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            LikeCount = 1,
                            ParentCommentId = new Guid("c1111111-c111-c111-c111-c11111111111"),
                            PostId = new Guid("a1111111-a111-a111-a111-a11111111111"),
                            ReplyCount = 0,
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("c3333333-c333-c333-c333-c33333333333"),
                            Content = "This looks delicious!",
                            CreatedAt = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            LikeCount = 4,
                            PostId = new Guid("a2222222-a222-a222-a222-a22222222222"),
                            ReplyCount = 1,
                            UserId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("c4444444-c444-c444-c444-c44444444444"),
                            Content = "Can you share the recipe?",
                            CreatedAt = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            LikeCount = 0,
                            PostId = new Guid("a2222222-a222-a222-a222-a22222222222"),
                            ReplyCount = 1,
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("c5555555-c555-c555-c555-c55555555555"),
                            Content = "Sure, I'll DM you!",
                            CreatedAt = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            LikeCount = 1,
                            ParentCommentId = new Guid("c4444444-c444-c444-c444-c44444444444"),
                            PostId = new Guid("a2222222-a222-a222-a222-a22222222222"),
                            ReplyCount = 0,
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("c6666666-c666-c666-c666-c66666666666"),
                            Content = "Nice setup! What monitor is that?",
                            CreatedAt = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            LikeCount = 1,
                            PostId = new Guid("a3333333-a333-a333-a333-a33333333333"),
                            ReplyCount = 1,
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("c7777777-c777-c777-c777-c77777777777"),
                            Content = "It's an LG 34\" ultrawide",
                            CreatedAt = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            LikeCount = 0,
                            ParentCommentId = new Guid("c6666666-c666-c666-c666-c66666666666"),
                            PostId = new Guid("a3333333-a333-a333-a333-a33333333333"),
                            ReplyCount = 0,
                            UserId = new Guid("33333333-3333-3333-3333-333333333333")
                        });
                });

            modelBuilder.Entity("Instagram_Backend.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1111111-b111-b111-b111-b11111111111"),
                            Order = 1,
                            PostId = new Guid("a1111111-a111-a111-a111-a11111111111"),
                            Url = "https://picsum.photos/id/1/800/800"
                        },
                        new
                        {
                            Id = new Guid("b2222222-b222-b222-b222-b22222222222"),
                            Order = 1,
                            PostId = new Guid("a2222222-a222-a222-a222-a22222222222"),
                            Url = "https://picsum.photos/id/2/800/800"
                        },
                        new
                        {
                            Id = new Guid("b3333333-b333-b333-b333-b33333333333"),
                            Order = 2,
                            PostId = new Guid("a2222222-a222-a222-a222-a22222222222"),
                            Url = "https://picsum.photos/id/3/800/800"
                        },
                        new
                        {
                            Id = new Guid("b4444444-b444-b444-b444-b44444444444"),
                            Order = 1,
                            PostId = new Guid("a3333333-a333-a333-a333-a33333333333"),
                            Url = "https://picsum.photos/id/4/800/800"
                        });
                });

            modelBuilder.Entity("Instagram_Backend.Models.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1111111-d111-d111-d111-d11111111111"),
                            CreatedAt = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            PostId = new Guid("a1111111-a111-a111-a111-a11111111111"),
                            Type = 0,
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("d2222222-d222-d222-d222-d22222222222"),
                            CreatedAt = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            PostId = new Guid("a1111111-a111-a111-a111-a11111111111"),
                            Type = 0,
                            UserId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("d3333333-d333-d333-d333-d33333333333"),
                            CreatedAt = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            PostId = new Guid("a2222222-a222-a222-a222-a22222222222"),
                            Type = 0,
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("d4444444-d444-d444-d444-d44444444444"),
                            CreatedAt = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            PostId = new Guid("a2222222-a222-a222-a222-a22222222222"),
                            Type = 0,
                            UserId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("d5555555-d555-d555-d555-d55555555555"),
                            CreatedAt = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            PostId = new Guid("a3333333-a333-a333-a333-a33333333333"),
                            Type = 0,
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("d6666666-d666-d666-d666-d66666666666"),
                            CreatedAt = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            PostId = new Guid("a3333333-a333-a333-a333-a33333333333"),
                            Type = 0,
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("d7777777-d777-d777-d777-d77777777777"),
                            CommentId = new Guid("c1111111-c111-c111-c111-c11111111111"),
                            CreatedAt = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = 1,
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("d8888888-d888-d888-d888-d88888888888"),
                            CommentId = new Guid("c1111111-c111-c111-c111-c11111111111"),
                            CreatedAt = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = 1,
                            UserId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("d9999999-d999-d999-d999-d99999999999"),
                            CommentId = new Guid("c2222222-c222-c222-c222-c22222222222"),
                            CreatedAt = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = 1,
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        });
                });

            modelBuilder.Entity("Instagram_Backend.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1111111-e111-e111-e111-e11111111111"),
                            ActorId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Content = "liked your post",
                            CreatedAt = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsRead = true,
                            PostId = new Guid("a1111111-a111-a111-a111-a11111111111"),
                            Type = 0,
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("e2222222-e222-e222-e222-e22222222222"),
                            ActorId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Content = "liked your post",
                            CreatedAt = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsRead = true,
                            PostId = new Guid("a1111111-a111-a111-a111-a11111111111"),
                            Type = 0,
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("e3333333-e333-e333-e333-e33333333333"),
                            ActorId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CommentId = new Guid("c1111111-c111-c111-c111-c11111111111"),
                            Content = "commented on your post",
                            CreatedAt = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsRead = true,
                            PostId = new Guid("a1111111-a111-a111-a111-a11111111111"),
                            Type = 1,
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("e4444444-e444-e444-e444-e44444444444"),
                            ActorId = new Guid("11111111-1111-1111-1111-111111111111"),
                            CommentId = new Guid("c2222222-c222-c222-c222-c22222222222"),
                            Content = "replied to your comment",
                            CreatedAt = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsRead = true,
                            PostId = new Guid("a1111111-a111-a111-a111-a11111111111"),
                            Type = 1,
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("e5555555-e555-e555-e555-e55555555555"),
                            ActorId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Content = "started following you",
                            CreatedAt = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsRead = true,
                            Type = 2,
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("e6666666-e666-e666-e666-e66666666666"),
                            ActorId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Content = "started following you",
                            CreatedAt = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsRead = false,
                            Type = 2,
                            UserId = new Guid("33333333-3333-3333-3333-333333333333")
                        });
                });

            modelBuilder.Entity("Instagram_Backend.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("CommentCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LikeCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1111111-a111-a111-a111-a11111111111"),
                            Caption = "Beautiful sunset at the beach!",
                            CommentCount = 2,
                            CreatedAt = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            LikeCount = 15,
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("a2222222-a222-a222-a222-a22222222222"),
                            Caption = "My homemade pasta recipe 🍝",
                            CommentCount = 3,
                            CreatedAt = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            LikeCount = 42,
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("a3333333-a333-a333-a333-a33333333333"),
                            Caption = "New coding setup complete",
                            CommentCount = 4,
                            CreatedAt = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            LikeCount = 28,
                            UserId = new Guid("33333333-3333-3333-3333-333333333333")
                        });
                });

            modelBuilder.Entity("Instagram_Backend.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiresAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            AccessFailedCount = 0,
                            Bio = "Photography enthusiast and traveler",
                            ConcurrencyStamp = "adae4445-ecf6-4fb2-a7e3-25d04cfe3fe9",
                            Email = "john@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN@EXAMPLE.COM",
                            NormalizedUserName = "JOHNDOE",
                            PasswordHash = "AQAAAAIAAYagAAAAEG9Yh999XbrReKfYRF6NzknIDvSmTjBuDq4KQkfqZweYlubTSIOeVLFmxSD3tar1IA==",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://randomuser.me/api/portraits/men/1.jpg",
                            TwoFactorEnabled = false,
                            UserName = "johndoe"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            AccessFailedCount = 0,
                            Bio = "Food blogger | Travel lover",
                            ConcurrencyStamp = "77cbcba0-e069-4b81-aea0-5495ca4dfb99",
                            Email = "jane@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "JANE@EXAMPLE.COM",
                            NormalizedUserName = "JANESMITH",
                            PasswordHash = "AQAAAAIAAYagAAAAEG9Yh999XbrReKfYRF6NzknIDvSmTjBuDq4KQkfqZweYlubTSIOeVLFmxSD3tar1IA==",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://randomuser.me/api/portraits/women/1.jpg",
                            TwoFactorEnabled = false,
                            UserName = "janesmith"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            AccessFailedCount = 0,
                            Bio = "Software developer and coffee addict",
                            ConcurrencyStamp = "5bd3d7d5-a190-4ebe-890f-fb9fe4f88f07",
                            Email = "alex@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alex",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEX@EXAMPLE.COM",
                            NormalizedUserName = "ALEXJ",
                            PasswordHash = "AQAAAAIAAYagAAAAEG9Yh999XbrReKfYRF6NzknIDvSmTjBuDq4KQkfqZweYlubTSIOeVLFmxSD3tar1IA==",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://randomuser.me/api/portraits/men/2.jpg",
                            TwoFactorEnabled = false,
                            UserName = "alexj"
                        });
                });

            modelBuilder.Entity("Instagram_Backend.Models.UserFollower", b =>
                {
                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowingId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowerId", "FollowingId");

                    b.HasIndex("FollowingId");

                    b.ToTable("UserFollowers");

                    b.HasData(
                        new
                        {
                            FollowerId = new Guid("22222222-2222-2222-2222-222222222222"),
                            FollowingId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            FollowerId = new Guid("33333333-3333-3333-3333-333333333333"),
                            FollowingId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            FollowerId = new Guid("11111111-1111-1111-1111-111111111111"),
                            FollowingId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            FollowerId = new Guid("11111111-1111-1111-1111-111111111111"),
                            FollowingId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            FollowerId = new Guid("22222222-2222-2222-2222-222222222222"),
                            FollowingId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            FollowerId = new Guid("33333333-3333-3333-3333-333333333333"),
                            FollowingId = new Guid("22222222-2222-2222-2222-222222222222")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Instagram_Backend.Models.Comment", b =>
                {
                    b.HasOne("Instagram_Backend.Models.Comment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Instagram_Backend.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Instagram_Backend.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentComment");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Instagram_Backend.Models.Image", b =>
                {
                    b.HasOne("Instagram_Backend.Models.Post", "Post")
                        .WithMany("Images")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Instagram_Backend.Models.Like", b =>
                {
                    b.HasOne("Instagram_Backend.Models.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Instagram_Backend.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Instagram_Backend.Models.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Instagram_Backend.Models.Notification", b =>
                {
                    b.HasOne("Instagram_Backend.Models.User", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Instagram_Backend.Models.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Instagram_Backend.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Instagram_Backend.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Comment");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Instagram_Backend.Models.Post", b =>
                {
                    b.HasOne("Instagram_Backend.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Instagram_Backend.Models.UserFollower", b =>
                {
                    b.HasOne("Instagram_Backend.Models.User", "Follower")
                        .WithMany("FollowingRelationships")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Instagram_Backend.Models.User", "Following")
                        .WithMany("FollowerRelationships")
                        .HasForeignKey("FollowingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Follower");

                    b.Navigation("Following");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Instagram_Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Instagram_Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Instagram_Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Instagram_Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Instagram_Backend.Models.Post", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Instagram_Backend.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FollowerRelationships");

                    b.Navigation("FollowingRelationships");

                    b.Navigation("Likes");

                    b.Navigation("Notifications");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
